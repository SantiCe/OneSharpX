/*
 * generated by Xtext 2.9.0
 */
package ceronsantiago.ide.contentassist.antlr;

import ceronsantiago.ide.contentassist.antlr.internal.InternalOneSharpExpressiveParser;
import ceronsantiago.services.OneSharpExpressiveGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class OneSharpExpressiveParser extends AbstractContentAssistParser {

	@Inject
	private OneSharpExpressiveGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalOneSharpExpressiveParser createParser() {
		InternalOneSharpExpressiveParser result = new InternalOneSharpExpressiveParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRegisterParamAccess().getAlternatives(), "rule__RegisterParam__Alternatives");
					put(grammarAccess.getWordParamAccess().getAlternatives(), "rule__WordParam__Alternatives");
					put(grammarAccess.getCallParamAccess().getAlternatives(), "rule__CallParam__Alternatives");
					put(grammarAccess.getUnlabeledCommandAccess().getAlternatives(), "rule__UnlabeledCommand__Alternatives");
					put(grammarAccess.getParamDecAccess().getAlternatives(), "rule__ParamDec__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getWriteAccess().getGroup(), "rule__Write__Group__0");
					put(grammarAccess.getNormalCaseAccess().getGroup(), "rule__NormalCase__Group__0");
					put(grammarAccess.getGotoAccess().getGroup(), "rule__Goto__Group__0");
					put(grammarAccess.getCallAccess().getGroup(), "rule__Call__Group__0");
					put(grammarAccess.getCallAccess().getGroup_2(), "rule__Call__Group_2__0");
					put(grammarAccess.getCallAccess().getGroup_2_1(), "rule__Call__Group_2_1__0");
					put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
					put(grammarAccess.getCommandAccess().getGroup_0(), "rule__Command__Group_0__0");
					put(grammarAccess.getIntParamDecAccess().getGroup(), "rule__IntParamDec__Group__0");
					put(grammarAccess.getStringParamDecAccess().getGroup(), "rule__StringParamDec__Group__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup(), "rule__FunctionDeclaration__Group__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup_2(), "rule__FunctionDeclaration__Group_2__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup_2_1(), "rule__FunctionDeclaration__Group_2_1__0");
					put(grammarAccess.getCommandBlockAccess().getGroup(), "rule__CommandBlock__Group__0");
					put(grammarAccess.getProgramAccess().getFunctionsAssignment_0(), "rule__Program__FunctionsAssignment_0");
					put(grammarAccess.getProgramAccess().getBodyAssignment_1(), "rule__Program__BodyAssignment_1");
					put(grammarAccess.getRegisterParamAccess().getParamAssignment_0(), "rule__RegisterParam__ParamAssignment_0");
					put(grammarAccess.getRegisterParamAccess().getValueAssignment_1(), "rule__RegisterParam__ValueAssignment_1");
					put(grammarAccess.getWordParamAccess().getParamAssignment_0(), "rule__WordParam__ParamAssignment_0");
					put(grammarAccess.getWordParamAccess().getValueAssignment_1(), "rule__WordParam__ValueAssignment_1");
					put(grammarAccess.getCallParamAccess().getIntValAssignment_0(), "rule__CallParam__IntValAssignment_0");
					put(grammarAccess.getCallParamAccess().getStringValAssignment_1(), "rule__CallParam__StringValAssignment_1");
					put(grammarAccess.getCallParamAccess().getParamAssignment_2(), "rule__CallParam__ParamAssignment_2");
					put(grammarAccess.getWriteAccess().getRegisterAssignment_1(), "rule__Write__RegisterAssignment_1");
					put(grammarAccess.getWriteAccess().getWordAssignment_2(), "rule__Write__WordAssignment_2");
					put(grammarAccess.getNormalCaseAccess().getRegisterAssignment_1(), "rule__NormalCase__RegisterAssignment_1");
					put(grammarAccess.getNormalCaseAccess().getCaseEmptyAssignment_3(), "rule__NormalCase__CaseEmptyAssignment_3");
					put(grammarAccess.getNormalCaseAccess().getCaseOneAssignment_5(), "rule__NormalCase__CaseOneAssignment_5");
					put(grammarAccess.getNormalCaseAccess().getCaseSharpAssignment_7(), "rule__NormalCase__CaseSharpAssignment_7");
					put(grammarAccess.getGotoAccess().getLabelAssignment_1(), "rule__Goto__LabelAssignment_1");
					put(grammarAccess.getCallAccess().getFunctionAssignment_0(), "rule__Call__FunctionAssignment_0");
					put(grammarAccess.getCallAccess().getParamsAssignment_2_0(), "rule__Call__ParamsAssignment_2_0");
					put(grammarAccess.getCallAccess().getParamsAssignment_2_1_1(), "rule__Call__ParamsAssignment_2_1_1");
					put(grammarAccess.getCommandAccess().getNameAssignment_0_0(), "rule__Command__NameAssignment_0_0");
					put(grammarAccess.getCommandAccess().getCommandAssignment_1(), "rule__Command__CommandAssignment_1");
					put(grammarAccess.getIntParamDecAccess().getNameAssignment_1(), "rule__IntParamDec__NameAssignment_1");
					put(grammarAccess.getStringParamDecAccess().getNameAssignment_1(), "rule__StringParamDec__NameAssignment_1");
					put(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_0(), "rule__FunctionDeclaration__NameAssignment_0");
					put(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_2_0(), "rule__FunctionDeclaration__ParamsAssignment_2_0");
					put(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_2_1_1(), "rule__FunctionDeclaration__ParamsAssignment_2_1_1");
					put(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_5(), "rule__FunctionDeclaration__BodyAssignment_5");
					put(grammarAccess.getCommandBlockAccess().getCommandsAssignment_1(), "rule__CommandBlock__CommandsAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalOneSharpExpressiveParser typedParser = (InternalOneSharpExpressiveParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public OneSharpExpressiveGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(OneSharpExpressiveGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
