/**
 * generated by Xtext 2.9.0
 */
package ceronsantiago.generator;

import ceronsantiago.oneSharpExpressive.IdOrInt;
import ceronsantiago.oneSharpExpressive.IdOrString;
import ceronsantiago.oneSharpExpressive.Write;
import com.google.common.base.Objects;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;

/**
 * Generates code from your model files on save.
 */
@SuppressWarnings("all")
public class OneSharpExpressiveGenerator extends AbstractGenerator {
  private final static String SEP = "\n";
  
  private static int currLine = 0;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
  }
  
  protected String _genCode(final Write cmd) {
    final StringBuilder onesBuilder = new StringBuilder();
    final StringBuilder returnBuilder = new StringBuilder();
    IdOrInt _register = cmd.getRegister();
    final int reg = _register.getValue();
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, reg, true);
    for (final Integer i : _doubleDotLessThan) {
      onesBuilder.append("1");
    }
    final String ones = onesBuilder.toString();
    IdOrString _word = cmd.getWord();
    String _value = _word.getValue();
    final char[] toWrite = _value.toCharArray();
    boolean first = true;
    for (final char c : toWrite) {
      {
        if (first) {
          first = false;
        } else {
          returnBuilder.append(OneSharpExpressiveGenerator.SEP);
        }
        returnBuilder.append(ones);
        boolean _equals = Objects.equal(Character.valueOf(c), "1");
        if (_equals) {
          returnBuilder.append("#");
        } else {
          returnBuilder.append("##");
        }
      }
    }
    return returnBuilder.toString();
  }
  
  public String genCode(final Write cmd) {
    return _genCode(cmd);
  }
}
