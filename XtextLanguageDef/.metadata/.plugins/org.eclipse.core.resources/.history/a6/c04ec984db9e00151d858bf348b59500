package ceronsantiago.onesharpx.lib;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Observable;

public class Program extends Observable{
	public static final int NOT_STARTED = 0, RUNNING = 1, HALTED = 2, STOPPED_IMPR = 3;
	
	public int state = NOT_STARTED;
	
	public ArrayList<String> commandList;
	
	public ObservableRegisterContainer registers;
	
	private int currentPos = 0;
	
	public Program(ArrayList<String> pCommand){
		commandList = pCommand;
	}
	
	public Program(String path) throws Exception{
		File file = new File(path);
		BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
		commandList = new ArrayList<>();
		
	}
	
	public void nextInstruction(){
		if(currentPos == commandList.size() ) state = HALTED;
		else if(currentPos > commandList.size()) state = STOPPED_IMPR;
		else if(currentPos < 0) state = STOPPED_IMPR;
		else{
			state = RUNNING;
			String inst = commandList.get(currentPos);
			String[] sp = inst.split(" "); //TODO: I could just save the array to start with.
			switch(sp[0]){
			case "W":
				addToRegister(Integer.parseInt(sp[1]),sp[2].charAt(0));
				++currentPos;
				break;
			case "M":
				currentPos+=Integer.parseInt(sp[1]);
				break;
			case "C":
				Boolean re = readFromRegister(Integer.parseInt(sp[1]));
				if(re == null) currentPos+=1;
				else if(re) currentPos+=2;
				else currentPos+=3;
				break;
			default:
				throw new IllegalArgumentException("Received instruction: "+inst);
			}
		}
	}
	
	public void addToRegister(int register, char c){
		registers.addToRegister(register, c);
	}
	
	public Boolean readFromRegister(int register){
		return registers.readFromRegister(register);
	}
}
