/*
 * generated by Xtext 2.9.0
 */
package ceronsantiago.validation

import ceronsantiago.oneSharpExpressive.Call
import ceronsantiago.oneSharpExpressive.CallParam
import ceronsantiago.oneSharpExpressive.Command
import ceronsantiago.oneSharpExpressive.CommandBlock
import ceronsantiago.oneSharpExpressive.FunctionDeclaration
import ceronsantiago.oneSharpExpressive.IntParamDec
import ceronsantiago.oneSharpExpressive.NormalCase
import ceronsantiago.oneSharpExpressive.OneSharpExpressivePackage
import ceronsantiago.oneSharpExpressive.ParamDec
import ceronsantiago.oneSharpExpressive.Program
import ceronsantiago.oneSharpExpressive.StringParamDec
import ceronsantiago.utils.Utils
import java.util.ArrayList
import java.util.HashSet
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class OneSharpExpressiveValidator extends AbstractOneSharpExpressiveValidator {
	
//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					OneSharpExpressivePackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	/**
	 * Checks that there are no repeated labels within the same CommandBlock
	 */
	@Check
	def checkNoRepeatedLabels(Command command){
		if(command.name == null) return
		var name = command.name
		for(cmd:Utils.getCommandBlock(command).commands.filter[cmd|cmd.name != null && cmd != command]){
			if(name.equals(cmd.name)){
				error("The label "+name+" is repeated within the same block",command,OneSharpExpressivePackage.Literals.COMMAND__NAME,"Invalid label")
				error("The label "+name+" is repeated within the same block",cmd,OneSharpExpressivePackage.Literals.COMMAND__NAME,"Invalid label")	
			}
		}
	}
	
	/**
	 * Checks that there are no repeated name parameters in a function declaration.
	 */
	 @Check
	 def checkNoRepeatedParamNamesInFunctionDeclaration(ParamDec pdec){
	 	var fdec = Utils.getFunctionDeclaration(pdec)
	 	val name = pdec.name
	 	for(param:fdec.params.filter[param|param != pdec && param.name.equals(name)]){
	 		error("There are two parameters with the name "+name+".",param,OneSharpExpressivePackage.Literals.PARAM_DEC__NAME,"Invalid name")
	 		error("There are two parameters with the name "+name+".",pdec,OneSharpExpressivePackage.Literals.PARAM_DEC__NAME,"Invalid name")
	 	}
	 }
	 
	 /**
	  * Checks that parameter usage is correct in terms of number of parameters and types.
	  */
	  @Check
	  def checkCorrectNumberOfParams(Call cmd){
	  	var fdec = cmd.function
	  	/*Check for wrong number */
	  	if(fdec.params.size != cmd.params.size)
	  		error("Incorrect number of parameters. Expected: "+fdec.params.size+" Actual: "+cmd.params.size+".",
	  			cmd, OneSharpExpressivePackage.Literals.CALL__PARAMS,"Invalid parameters")
	  }
	  
	  /**
	   * Check for correct type of parameters used in FunctionCalls.
	   */
	  @Check
	  def checkCorrectTypeOfParams(CallParam param){
	  	var container = param as EObject
	  	while(container != null && !(container instanceof Call)) container = container.eContainer
	  	if(container == null) return
	  	var command = container as Call
	  	var callparams = command.params
	  	var funparams = command.function.params
	  	//Find the position of this param
	  	var pos = 0
	  	var found = false
	  	for(;pos < callparams.size && !found; pos++){
	  		if(callparams.get(pos) == param) found = true
	  	}
	  	pos--
	  	if(!found) return;
	  	if(pos >= funparams.size) checkCorrectNumberOfParams(command)
	  	else{
	  		var pdec = funparams.get(pos)
	  		if(pdec instanceof IntParamDec){
	  			if(param.stringVal != null || (param.param != null && param.param instanceof StringParamDec))
	  			{
	  				error("Incorrect type of parameter. Expected INT and found STRING.",param,OneSharpExpressivePackage.Literals.CALL_PARAM__PARAM)
	  			}
	  		}
	  		else{
	  			if(param.stringVal == null && param.param != null && param.param instanceof IntParamDec){
	  				error("Incorrect type of parameter. Expected STRING and found INT.",param,OneSharpExpressivePackage.Literals.CALL_PARAM__PARAM)
	  			} 
	  		}
	  	}
	  }
	  /**
	   * Function names should be unique.
	   */
	   @Check
	   def checkUniqueFnName(FunctionDeclaration fdec){
	   	var name = fdec.name
	   	var program = fdec.eContainer as Program
	   	for(fn:program.functions.filter[f|f != fdec]){
	   		if(name == fn.name){
	   			error("Different functions must have different names. Two functions with name: "+name+".",
	   				fdec, OneSharpExpressivePackage.Literals.FUNCTION_DECLARATION__NAME
	   			)
	   			error("Different functions must have different names. Two functions with name: "+name+".",
	   				fn, OneSharpExpressivePackage.Literals.FUNCTION_DECLARATION__NAME
	   			)
	   		}
	   	}
	   }
	  /**
	   * Check that there are no cyclic/recursive calls.
	   */ 
	   	@Check
	   	def checkForNoCyclicCalls(Call command){
	   		var gray = new HashSet<String>
	   		var black = new HashSet<String>
	   		
	   	}
	   	
	   	def boolean dfs(FunctionDeclaration fdec, HashSet<String> gray, HashSet<String> black){
	   		if(gray.contains(fdec.name)) return false
	   		gray.add(fdec.name)
	   		var list = new ArrayList<FunctionDeclaration>
	   		functionsCalled(fdec.body,list)
	   		for(fn:list.filter[f|!black.contains(f.name)]){
	   			if(!dfs(fn,gray,black)) return false
	   		}
	   		gray.remove(fdec.name)
	   		black.add(fdec.name)
	   		return true
	   		
	   	}
	   	def List<FunctionDeclaration> functionsCalled(CommandBlock block, List<FunctionDeclaration> list){
	   		//Get direct calls.
	   		list.addAll(block.commands.filter[cmd|cmd.command instanceof Call].map[cmd|(cmd.command as Call).function].toList)
	   		//Get calls in cases calls.
	   		for(cas:block.commands.filter[cmd|cmd.command instanceof NormalCase].map[cmd|cmd.command as NormalCase])
	   		{
	   			list = cas.caseOne.functionsCalled(list)
	   			list = cas.caseEmpty.functionsCalled(list)
	   			list = cas.caseSharp.functionsCalled(list)   				
	   		}
	   		return list
	   	}		
}
