/*
 * generated by Xtext 2.9.0
 */
package ceronsantiago.serializer;

import ceronsantiago.oneSharpExpressive.Call;
import ceronsantiago.oneSharpExpressive.CallParam;
import ceronsantiago.oneSharpExpressive.Command;
import ceronsantiago.oneSharpExpressive.CommandBlock;
import ceronsantiago.oneSharpExpressive.FunctionDeclaration;
import ceronsantiago.oneSharpExpressive.Goto;
import ceronsantiago.oneSharpExpressive.IntParamDec;
import ceronsantiago.oneSharpExpressive.NormalCase;
import ceronsantiago.oneSharpExpressive.OneSharpExpressivePackage;
import ceronsantiago.oneSharpExpressive.Program;
import ceronsantiago.oneSharpExpressive.RegisterParam;
import ceronsantiago.oneSharpExpressive.StringParamDec;
import ceronsantiago.oneSharpExpressive.WordParam;
import ceronsantiago.oneSharpExpressive.Write;
import ceronsantiago.services.OneSharpExpressiveGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class OneSharpExpressiveSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private OneSharpExpressiveGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == OneSharpExpressivePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case OneSharpExpressivePackage.CALL:
				sequence_Call(context, (Call) semanticObject); 
				return; 
			case OneSharpExpressivePackage.CALL_PARAM:
				sequence_CallParam(context, (CallParam) semanticObject); 
				return; 
			case OneSharpExpressivePackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case OneSharpExpressivePackage.COMMAND_BLOCK:
				sequence_CommandBlock(context, (CommandBlock) semanticObject); 
				return; 
			case OneSharpExpressivePackage.FUNCTION_DECLARATION:
				sequence_FunctionDeclaration(context, (FunctionDeclaration) semanticObject); 
				return; 
			case OneSharpExpressivePackage.GOTO:
				sequence_Goto(context, (Goto) semanticObject); 
				return; 
			case OneSharpExpressivePackage.INT_PARAM_DEC:
				sequence_IntParamDec(context, (IntParamDec) semanticObject); 
				return; 
			case OneSharpExpressivePackage.NORMAL_CASE:
				sequence_NormalCase(context, (NormalCase) semanticObject); 
				return; 
			case OneSharpExpressivePackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case OneSharpExpressivePackage.REGISTER_PARAM:
				sequence_RegisterParam(context, (RegisterParam) semanticObject); 
				return; 
			case OneSharpExpressivePackage.STRING_PARAM_DEC:
				sequence_StringParamDec(context, (StringParamDec) semanticObject); 
				return; 
			case OneSharpExpressivePackage.WORD_PARAM:
				sequence_WordParam(context, (WordParam) semanticObject); 
				return; 
			case OneSharpExpressivePackage.WRITE:
				sequence_Write(context, (Write) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CallParam returns CallParam
	 *
	 * Constraint:
	 *     (intVal=INT | stringVal=OS | param=[ParamDec|ID])
	 */
	protected void sequence_CallParam(ISerializationContext context, CallParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Call returns Call
	 *     UnlabeledCommand returns Call
	 *
	 * Constraint:
	 *     (function=[FunctionDeclaration|ID] (params+=CallParam params+=CallParam*)?)
	 */
	protected void sequence_Call(ISerializationContext context, Call semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommandBlock returns CommandBlock
	 *
	 * Constraint:
	 *     commands+=Command*
	 */
	protected void sequence_CommandBlock(ISerializationContext context, CommandBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     (name=ID? command=UnlabeledCommand)
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionDeclaration returns FunctionDeclaration
	 *
	 * Constraint:
	 *     (name=ID (params+=ParamDec params+=ParamDec*)? body=CommandBlock)
	 */
	protected void sequence_FunctionDeclaration(ISerializationContext context, FunctionDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Goto returns Goto
	 *     UnlabeledCommand returns Goto
	 *
	 * Constraint:
	 *     label=[Command|ID]
	 */
	protected void sequence_Goto(ISerializationContext context, Goto semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OneSharpExpressivePackage.Literals.GOTO__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OneSharpExpressivePackage.Literals.GOTO__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGotoAccess().getLabelCommandIDTerminalRuleCall_1_0_1(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IntParamDec returns IntParamDec
	 *     ParamDec returns IntParamDec
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_IntParamDec(ISerializationContext context, IntParamDec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OneSharpExpressivePackage.Literals.PARAM_DEC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OneSharpExpressivePackage.Literals.PARAM_DEC__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntParamDecAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalCase returns NormalCase
	 *     UnlabeledCommand returns NormalCase
	 *
	 * Constraint:
	 *     (register=RegisterParam caseEmpty=CommandBlock caseOne=CommandBlock caseSharp=CommandBlock)
	 */
	protected void sequence_NormalCase(ISerializationContext context, NormalCase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OneSharpExpressivePackage.Literals.NORMAL_CASE__REGISTER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OneSharpExpressivePackage.Literals.NORMAL_CASE__REGISTER));
			if (transientValues.isValueTransient(semanticObject, OneSharpExpressivePackage.Literals.NORMAL_CASE__CASE_EMPTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OneSharpExpressivePackage.Literals.NORMAL_CASE__CASE_EMPTY));
			if (transientValues.isValueTransient(semanticObject, OneSharpExpressivePackage.Literals.NORMAL_CASE__CASE_ONE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OneSharpExpressivePackage.Literals.NORMAL_CASE__CASE_ONE));
			if (transientValues.isValueTransient(semanticObject, OneSharpExpressivePackage.Literals.NORMAL_CASE__CASE_SHARP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OneSharpExpressivePackage.Literals.NORMAL_CASE__CASE_SHARP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalCaseAccess().getRegisterRegisterParamParserRuleCall_1_0(), semanticObject.getRegister());
		feeder.accept(grammarAccess.getNormalCaseAccess().getCaseEmptyCommandBlockParserRuleCall_3_0(), semanticObject.getCaseEmpty());
		feeder.accept(grammarAccess.getNormalCaseAccess().getCaseOneCommandBlockParserRuleCall_5_0(), semanticObject.getCaseOne());
		feeder.accept(grammarAccess.getNormalCaseAccess().getCaseSharpCommandBlockParserRuleCall_7_0(), semanticObject.getCaseSharp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (functions+=FunctionDeclaration* body=CommandBlock)
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RegisterParam returns RegisterParam
	 *
	 * Constraint:
	 *     (param=[IntParamDec|ID] | value=INT)
	 */
	protected void sequence_RegisterParam(ISerializationContext context, RegisterParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StringParamDec returns StringParamDec
	 *     ParamDec returns StringParamDec
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_StringParamDec(ISerializationContext context, StringParamDec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OneSharpExpressivePackage.Literals.PARAM_DEC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OneSharpExpressivePackage.Literals.PARAM_DEC__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringParamDecAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     WordParam returns WordParam
	 *
	 * Constraint:
	 *     (param=[StringParamDec|ID] | value=OS)
	 */
	protected void sequence_WordParam(ISerializationContext context, WordParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Write returns Write
	 *     UnlabeledCommand returns Write
	 *
	 * Constraint:
	 *     (register=RegisterParam word=WordParam)
	 */
	protected void sequence_Write(ISerializationContext context, Write semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OneSharpExpressivePackage.Literals.WRITE__REGISTER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OneSharpExpressivePackage.Literals.WRITE__REGISTER));
			if (transientValues.isValueTransient(semanticObject, OneSharpExpressivePackage.Literals.WRITE__WORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OneSharpExpressivePackage.Literals.WRITE__WORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWriteAccess().getRegisterRegisterParamParserRuleCall_1_0(), semanticObject.getRegister());
		feeder.accept(grammarAccess.getWriteAccess().getWordWordParamParserRuleCall_2_0(), semanticObject.getWord());
		feeder.finish();
	}
	
	
}
