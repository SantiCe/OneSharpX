/**
 * generated by Xtext 2.9.0
 */
package ceronsantiago.oneSharpExpressive.impl;

import ceronsantiago.oneSharpExpressive.OneSharpExpressivePackage;
import ceronsantiago.oneSharpExpressive.RegisterParam;
import ceronsantiago.oneSharpExpressive.WordParam;
import ceronsantiago.oneSharpExpressive.Write;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Write</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ceronsantiago.oneSharpExpressive.impl.WriteImpl#getRegister <em>Register</em>}</li>
 *   <li>{@link ceronsantiago.oneSharpExpressive.impl.WriteImpl#getWord <em>Word</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WriteImpl extends UnlabeledCommandImpl implements Write
{
  /**
   * The cached value of the '{@link #getRegister() <em>Register</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRegister()
   * @generated
   * @ordered
   */
  protected RegisterParam register;

  /**
   * The cached value of the '{@link #getWord() <em>Word</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWord()
   * @generated
   * @ordered
   */
  protected WordParam word;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WriteImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OneSharpExpressivePackage.Literals.WRITE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegisterParam getRegister()
  {
    return register;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRegister(RegisterParam newRegister, NotificationChain msgs)
  {
    RegisterParam oldRegister = register;
    register = newRegister;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OneSharpExpressivePackage.WRITE__REGISTER, oldRegister, newRegister);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRegister(RegisterParam newRegister)
  {
    if (newRegister != register)
    {
      NotificationChain msgs = null;
      if (register != null)
        msgs = ((InternalEObject)register).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OneSharpExpressivePackage.WRITE__REGISTER, null, msgs);
      if (newRegister != null)
        msgs = ((InternalEObject)newRegister).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OneSharpExpressivePackage.WRITE__REGISTER, null, msgs);
      msgs = basicSetRegister(newRegister, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OneSharpExpressivePackage.WRITE__REGISTER, newRegister, newRegister));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WordParam getWord()
  {
    return word;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWord(WordParam newWord, NotificationChain msgs)
  {
    WordParam oldWord = word;
    word = newWord;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OneSharpExpressivePackage.WRITE__WORD, oldWord, newWord);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWord(WordParam newWord)
  {
    if (newWord != word)
    {
      NotificationChain msgs = null;
      if (word != null)
        msgs = ((InternalEObject)word).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OneSharpExpressivePackage.WRITE__WORD, null, msgs);
      if (newWord != null)
        msgs = ((InternalEObject)newWord).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OneSharpExpressivePackage.WRITE__WORD, null, msgs);
      msgs = basicSetWord(newWord, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OneSharpExpressivePackage.WRITE__WORD, newWord, newWord));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OneSharpExpressivePackage.WRITE__REGISTER:
        return basicSetRegister(null, msgs);
      case OneSharpExpressivePackage.WRITE__WORD:
        return basicSetWord(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OneSharpExpressivePackage.WRITE__REGISTER:
        return getRegister();
      case OneSharpExpressivePackage.WRITE__WORD:
        return getWord();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OneSharpExpressivePackage.WRITE__REGISTER:
        setRegister((RegisterParam)newValue);
        return;
      case OneSharpExpressivePackage.WRITE__WORD:
        setWord((WordParam)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OneSharpExpressivePackage.WRITE__REGISTER:
        setRegister((RegisterParam)null);
        return;
      case OneSharpExpressivePackage.WRITE__WORD:
        setWord((WordParam)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OneSharpExpressivePackage.WRITE__REGISTER:
        return register != null;
      case OneSharpExpressivePackage.WRITE__WORD:
        return word != null;
    }
    return super.eIsSet(featureID);
  }

} //WriteImpl
