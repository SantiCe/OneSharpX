/*
 * generated by Xtext
 */
package org.ceronsantiago.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.ceronsantiago.services.OneSharpExpressiveGrammarAccess;

public class OneSharpExpressiveParser extends AbstractContentAssistParser {
	
	@Inject
	private OneSharpExpressiveGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.ceronsantiago.ui.contentassist.antlr.internal.InternalOneSharpExpressiveParser createParser() {
		org.ceronsantiago.ui.contentassist.antlr.internal.InternalOneSharpExpressiveParser result = new org.ceronsantiago.ui.contentassist.antlr.internal.InternalOneSharpExpressiveParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getIdOrIntAccess().getAlternatives(), "rule__IdOrInt__Alternatives");
					put(grammarAccess.getIdOrStringAccess().getAlternatives(), "rule__IdOrString__Alternatives");
					put(grammarAccess.getCallAccess().getAlternatives_4_0(), "rule__Call__Alternatives_4_0");
					put(grammarAccess.getCallAccess().getAlternatives_4_1_1(), "rule__Call__Alternatives_4_1_1");
					put(grammarAccess.getCommandAccess().getCommandAlternatives_2_0(), "rule__Command__CommandAlternatives_2_0");
					put(grammarAccess.getFunctionHeaderAccess().getAlternatives_2_0_0(), "rule__FunctionHeader__Alternatives_2_0_0");
					put(grammarAccess.getFunctionHeaderAccess().getAlternatives_2_1_1_0(), "rule__FunctionHeader__Alternatives_2_1_1_0");
					put(grammarAccess.getWriteAccess().getGroup(), "rule__Write__Group__0");
					put(grammarAccess.getNormalCaseAccess().getGroup(), "rule__NormalCase__Group__0");
					put(grammarAccess.getLoopCaseAccess().getGroup(), "rule__LoopCase__Group__0");
					put(grammarAccess.getGotoAccess().getGroup(), "rule__Goto__Group__0");
					put(grammarAccess.getCallAccess().getGroup(), "rule__Call__Group__0");
					put(grammarAccess.getCallAccess().getGroup_4(), "rule__Call__Group_4__0");
					put(grammarAccess.getCallAccess().getGroup_4_1(), "rule__Call__Group_4_1__0");
					put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
					put(grammarAccess.getCommandAccess().getGroup_1(), "rule__Command__Group_1__0");
					put(grammarAccess.getFunctionHeaderAccess().getGroup(), "rule__FunctionHeader__Group__0");
					put(grammarAccess.getFunctionHeaderAccess().getGroup_2(), "rule__FunctionHeader__Group_2__0");
					put(grammarAccess.getFunctionHeaderAccess().getGroup_2_0(), "rule__FunctionHeader__Group_2_0__0");
					put(grammarAccess.getFunctionHeaderAccess().getGroup_2_1(), "rule__FunctionHeader__Group_2_1__0");
					put(grammarAccess.getFunctionHeaderAccess().getGroup_2_1_1(), "rule__FunctionHeader__Group_2_1_1__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup(), "rule__FunctionDeclaration__Group__0");
					put(grammarAccess.getProgramAccess().getFunctionsAssignment(), "rule__Program__FunctionsAssignment");
					put(grammarAccess.getWriteAccess().getRegisterAssignment_2(), "rule__Write__RegisterAssignment_2");
					put(grammarAccess.getWriteAccess().getWordAssignment_3(), "rule__Write__WordAssignment_3");
					put(grammarAccess.getNormalCaseAccess().getRegisterAssignment_2(), "rule__NormalCase__RegisterAssignment_2");
					put(grammarAccess.getNormalCaseAccess().getCaseOneAssignment_4(), "rule__NormalCase__CaseOneAssignment_4");
					put(grammarAccess.getNormalCaseAccess().getCaseSharpAssignment_6(), "rule__NormalCase__CaseSharpAssignment_6");
					put(grammarAccess.getNormalCaseAccess().getCaseEmptyAssignment_8(), "rule__NormalCase__CaseEmptyAssignment_8");
					put(grammarAccess.getLoopCaseAccess().getRegisterAssignment_2(), "rule__LoopCase__RegisterAssignment_2");
					put(grammarAccess.getLoopCaseAccess().getCaseOneAssignment_4(), "rule__LoopCase__CaseOneAssignment_4");
					put(grammarAccess.getLoopCaseAccess().getCaseSharpAssignment_6(), "rule__LoopCase__CaseSharpAssignment_6");
					put(grammarAccess.getGotoAccess().getLabelAssignment_2(), "rule__Goto__LabelAssignment_2");
					put(grammarAccess.getCallAccess().getFunctionAssignment_2(), "rule__Call__FunctionAssignment_2");
					put(grammarAccess.getCommandAccess().getLabelAssignment_1_0(), "rule__Command__LabelAssignment_1_0");
					put(grammarAccess.getCommandAccess().getCommandAssignment_2(), "rule__Command__CommandAssignment_2");
					put(grammarAccess.getFunctionHeaderAccess().getFuncNameAssignment_0(), "rule__FunctionHeader__FuncNameAssignment_0");
					put(grammarAccess.getFunctionDeclarationAccess().getFuncHeaderAssignment_0(), "rule__FunctionDeclaration__FuncHeaderAssignment_0");
					put(grammarAccess.getFunctionDeclarationAccess().getCommandsAssignment_2(), "rule__FunctionDeclaration__CommandsAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.ceronsantiago.ui.contentassist.antlr.internal.InternalOneSharpExpressiveParser typedParser = (org.ceronsantiago.ui.contentassist.antlr.internal.InternalOneSharpExpressiveParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public OneSharpExpressiveGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(OneSharpExpressiveGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
