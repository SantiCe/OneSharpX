/*
 * generated by Xtext
 */
grammar InternalOneSharpExpressive;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.ceronsantiago.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.ceronsantiago.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.ceronsantiago.services.OneSharpExpressiveGrammarAccess;

}

@parser::members {

 	private OneSharpExpressiveGrammarAccess grammarAccess;
 	
    public InternalOneSharpExpressiveParser(TokenStream input, OneSharpExpressiveGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected OneSharpExpressiveGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getFunctionsFunctionDeclarationParserRuleCall_0()); 
	    }
		lv_functions_0_0=ruleFunctionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_0_0, 
        		"FunctionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleIdOrInt
entryRuleIdOrInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdOrIntRule()); } 
	 iv_ruleIdOrInt=ruleIdOrInt 
	 { $current=$iv_ruleIdOrInt.current.getText(); }  
	 EOF 
;

// Rule IdOrInt
ruleIdOrInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIdOrIntAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getIdOrIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleIdOrString
entryRuleIdOrString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdOrStringRule()); } 
	 iv_ruleIdOrString=ruleIdOrString 
	 { $current=$iv_ruleIdOrString.current.getText(); }  
	 EOF 
;

// Rule IdOrString
ruleIdOrString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIdOrStringAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_OS_1=RULE_OS    {
		$current.merge(this_OS_1);
    }

    { 
    newLeafNode(this_OS_1, grammarAccess.getIdOrStringAccess().getOSTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleWrite
entryRuleWrite returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWriteRule()); }
	 iv_ruleWrite=ruleWrite 
	 { $current=$iv_ruleWrite.current; } 
	 EOF 
;

// Rule Write
ruleWrite returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getWriteAccess().getWriteAction_0(),
            $current);
    }
)	otherlv_1='write' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWriteAccess().getWriteKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWriteAccess().getRegisterIdOrIntParserRuleCall_2_0()); 
	    }
		lv_register_2_0=ruleIdOrInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWriteRule());
	        }
       		set(
       			$current, 
       			"register",
        		lv_register_2_0, 
        		"IdOrInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWriteAccess().getWordIdOrStringParserRuleCall_3_0()); 
	    }
		lv_word_3_0=ruleIdOrString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWriteRule());
	        }
       		set(
       			$current, 
       			"word",
        		lv_word_3_0, 
        		"IdOrString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNormalCase
entryRuleNormalCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNormalCaseRule()); }
	 iv_ruleNormalCase=ruleNormalCase 
	 { $current=$iv_ruleNormalCase.current; } 
	 EOF 
;

// Rule NormalCase
ruleNormalCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNormalCaseAccess().getNormalCaseAction_0(),
            $current);
    }
)	otherlv_1='switch' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNormalCaseAccess().getSwitchKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalCaseAccess().getRegisterIdOrIntParserRuleCall_2_0()); 
	    }
		lv_register_2_0=ruleIdOrInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalCaseRule());
	        }
       		set(
       			$current, 
       			"register",
        		lv_register_2_0, 
        		"IdOrInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='case' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNormalCaseAccess().getCaseKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalCaseAccess().getCaseOneCommandParserRuleCall_4_0()); 
	    }
		lv_caseOne_4_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalCaseRule());
	        }
       		add(
       			$current, 
       			"caseOne",
        		lv_caseOne_4_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='case' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNormalCaseAccess().getCaseKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalCaseAccess().getCaseSharpCommandParserRuleCall_6_0()); 
	    }
		lv_caseSharp_6_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalCaseRule());
	        }
       		add(
       			$current, 
       			"caseSharp",
        		lv_caseSharp_6_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='case' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNormalCaseAccess().getCaseKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalCaseAccess().getCaseEmptyCommandParserRuleCall_8_0()); 
	    }
		lv_caseEmpty_8_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalCaseRule());
	        }
       		add(
       			$current, 
       			"caseEmpty",
        		lv_caseEmpty_8_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='end' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getNormalCaseAccess().getEndKeyword_9());
    }
)
;





// Entry rule entryRuleLoopCase
entryRuleLoopCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopCaseRule()); }
	 iv_ruleLoopCase=ruleLoopCase 
	 { $current=$iv_ruleLoopCase.current; } 
	 EOF 
;

// Rule LoopCase
ruleLoopCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLoopCaseAccess().getLoopCaseAction_0(),
            $current);
    }
)	otherlv_1='rswitch' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLoopCaseAccess().getRswitchKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopCaseAccess().getRegisterIdOrIntParserRuleCall_2_0()); 
	    }
		lv_register_2_0=ruleIdOrInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopCaseRule());
	        }
       		set(
       			$current, 
       			"register",
        		lv_register_2_0, 
        		"IdOrInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='case' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLoopCaseAccess().getCaseKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopCaseAccess().getCaseOneCommandParserRuleCall_4_0()); 
	    }
		lv_caseOne_4_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopCaseRule());
	        }
       		add(
       			$current, 
       			"caseOne",
        		lv_caseOne_4_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='case' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLoopCaseAccess().getCaseKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopCaseAccess().getCaseSharpCommandParserRuleCall_6_0()); 
	    }
		lv_caseSharp_6_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopCaseRule());
	        }
       		add(
       			$current, 
       			"caseSharp",
        		lv_caseSharp_6_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='end' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLoopCaseAccess().getEndKeyword_7());
    }
)
;





// Entry rule entryRuleGoto
entryRuleGoto returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGotoRule()); }
	 iv_ruleGoto=ruleGoto 
	 { $current=$iv_ruleGoto.current; } 
	 EOF 
;

// Rule Goto
ruleGoto returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGotoAccess().getGotoAction_0(),
            $current);
    }
)	otherlv_1='goto' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGotoAccess().getGotoKeyword_1());
    }
(
(
		lv_label_2_0=RULE_ID
		{
			newLeafNode(lv_label_2_0, grammarAccess.getGotoAccess().getLabelIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGotoRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	 iv_ruleCall=ruleCall 
	 { $current=$iv_ruleCall.current; } 
	 EOF 
;

// Rule Call
ruleCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCallAccess().getCallAction_0(),
            $current);
    }
)	otherlv_1='call' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCallAccess().getCallKeyword_1());
    }
(
(
		lv_function_2_0=RULE_ID
		{
			newLeafNode(lv_function_2_0, grammarAccess.getCallAccess().getFunctionIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"function",
        		lv_function_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCallAccess().getLeftParenthesisKeyword_3());
    }
((this_INT_4=RULE_INT
    { 
    newLeafNode(this_INT_4, grammarAccess.getCallAccess().getINTTerminalRuleCall_4_0_0()); 
    }

    |this_OS_5=RULE_OS
    { 
    newLeafNode(this_OS_5, grammarAccess.getCallAccess().getOSTerminalRuleCall_4_0_1()); 
    }

    |this_ID_6=RULE_ID
    { 
    newLeafNode(this_ID_6, grammarAccess.getCallAccess().getIDTerminalRuleCall_4_0_2()); 
    }
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCallAccess().getCommaKeyword_4_1_0());
    }
(this_INT_8=RULE_INT
    { 
    newLeafNode(this_INT_8, grammarAccess.getCallAccess().getINTTerminalRuleCall_4_1_1_0()); 
    }

    |this_OS_9=RULE_OS
    { 
    newLeafNode(this_OS_9, grammarAccess.getCallAccess().getOSTerminalRuleCall_4_1_1_1()); 
    }

    |this_ID_10=RULE_ID
    { 
    newLeafNode(this_ID_10, grammarAccess.getCallAccess().getIDTerminalRuleCall_4_1_1_2()); 
    }
))*)?	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getCallAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCommandAccess().getCommandAction_0(),
            $current);
    }
)((
(
		lv_label_1_0=RULE_ID
		{
			newLeafNode(lv_label_1_0, grammarAccess.getCommandAccess().getLabelIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCommandAccess().getColonKeyword_1_1());
    }
)?(
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getCommandWriteParserRuleCall_2_0_0()); 
	    }
		lv_command_3_1=ruleWrite		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"command",
        		lv_command_3_1, 
        		"Write");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getCommandNormalCaseParserRuleCall_2_0_1()); 
	    }
		lv_command_3_2=ruleNormalCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"command",
        		lv_command_3_2, 
        		"NormalCase");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getCommandLoopCaseParserRuleCall_2_0_2()); 
	    }
		lv_command_3_3=ruleLoopCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"command",
        		lv_command_3_3, 
        		"LoopCase");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getCommandGotoParserRuleCall_2_0_3()); 
	    }
		lv_command_3_4=ruleGoto		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"command",
        		lv_command_3_4, 
        		"Goto");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getCommandCallParserRuleCall_2_0_4()); 
	    }
		lv_command_3_5=ruleCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"command",
        		lv_command_3_5, 
        		"Call");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleFunctionHeader
entryRuleFunctionHeader returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionHeaderRule()); }
	 iv_ruleFunctionHeader=ruleFunctionHeader 
	 { $current=$iv_ruleFunctionHeader.current; } 
	 EOF 
;

// Rule FunctionHeader
ruleFunctionHeader returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_funcName_0_0=RULE_ID
		{
			newLeafNode(lv_funcName_0_0, grammarAccess.getFunctionHeaderAccess().getFuncNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionHeaderRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"funcName",
        		lv_funcName_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionHeaderAccess().getLeftParenthesisKeyword_1());
    }
(((	otherlv_2='int' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionHeaderAccess().getIntKeyword_2_0_0_0());
    }

    |	otherlv_3='string' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionHeaderAccess().getStringKeyword_2_0_0_1());
    }
)this_ID_4=RULE_ID
    { 
    newLeafNode(this_ID_4, grammarAccess.getFunctionHeaderAccess().getIDTerminalRuleCall_2_0_1()); 
    }
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionHeaderAccess().getCommaKeyword_2_1_0());
    }
((	otherlv_6='int' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionHeaderAccess().getIntKeyword_2_1_1_0_0());
    }

    |	otherlv_7='string' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionHeaderAccess().getStringKeyword_2_1_1_0_1());
    }
)this_ID_8=RULE_ID
    { 
    newLeafNode(this_ID_8, grammarAccess.getFunctionHeaderAccess().getIDTerminalRuleCall_2_1_1_1()); 
    }
))*)?	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFunctionHeaderAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_ruleFunctionDeclaration=ruleFunctionDeclaration 
	 { $current=$iv_ruleFunctionDeclaration.current; } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getFuncHeaderFunctionHeaderParserRuleCall_0_0()); 
	    }
		lv_funcHeader_0_0=ruleFunctionHeader		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"funcHeader",
        		lv_funcHeader_0_0, 
        		"FunctionHeader");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='begin' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionDeclarationAccess().getBeginKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getCommandsCommandParserRuleCall_2_0()); 
	    }
		lv_commands_2_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_2_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='end' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getEndKeyword_3());
    }
)
;





fragment RULE_LETTER : ('A'..'Z'|'a'..'z'|'_');

fragment RULE_DIGIT : '0'..'9';

RULE_INT : RULE_DIGIT+;

RULE_ID : RULE_LETTER+ (RULE_LETTER|RULE_DIGIT|'#')*;

RULE_OS : '"' ('1'|'#')+ '"';

RULE_WS : (' '|'\t'|'\r'|'\n'|';')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;


