/*
 * generated by Xtext
 */
grammar InternalOneSharpExpressive;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.ceronsantiago.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.ceronsantiago.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.ceronsantiago.services.OneSharpExpressiveGrammarAccess;

}

@parser::members {
 
 	private OneSharpExpressiveGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(OneSharpExpressiveGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getProgramAccess().getFunctionsAssignment()); }
(rule__Program__FunctionsAssignment)
{ after(grammarAccess.getProgramAccess().getFunctionsAssignment()); }
)
(
{ before(grammarAccess.getProgramAccess().getFunctionsAssignment()); }
(rule__Program__FunctionsAssignment)*
{ after(grammarAccess.getProgramAccess().getFunctionsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVAR_INT
entryRuleVAR_INT 
:
{ before(grammarAccess.getVAR_INTRule()); }
	 ruleVAR_INT
{ after(grammarAccess.getVAR_INTRule()); } 
	 EOF 
;

// Rule VAR_INT
ruleVAR_INT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVAR_INTAccess().getAlternatives()); }
(rule__VAR_INT__Alternatives)
{ after(grammarAccess.getVAR_INTAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWrite
entryRuleWrite 
:
{ before(grammarAccess.getWriteRule()); }
	 ruleWrite
{ after(grammarAccess.getWriteRule()); } 
	 EOF 
;

// Rule Write
ruleWrite
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWriteAccess().getGroup()); }
(rule__Write__Group__0)
{ after(grammarAccess.getWriteAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNormalCase
entryRuleNormalCase 
:
{ before(grammarAccess.getNormalCaseRule()); }
	 ruleNormalCase
{ after(grammarAccess.getNormalCaseRule()); } 
	 EOF 
;

// Rule NormalCase
ruleNormalCase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNormalCaseAccess().getGroup()); }
(rule__NormalCase__Group__0)
{ after(grammarAccess.getNormalCaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoopCase
entryRuleLoopCase 
:
{ before(grammarAccess.getLoopCaseRule()); }
	 ruleLoopCase
{ after(grammarAccess.getLoopCaseRule()); } 
	 EOF 
;

// Rule LoopCase
ruleLoopCase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoopCaseAccess().getGroup()); }
(rule__LoopCase__Group__0)
{ after(grammarAccess.getLoopCaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoto
entryRuleGoto 
:
{ before(grammarAccess.getGotoRule()); }
	 ruleGoto
{ after(grammarAccess.getGotoRule()); } 
	 EOF 
;

// Rule Goto
ruleGoto
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGotoAccess().getGroup()); }
(rule__Goto__Group__0)
{ after(grammarAccess.getGotoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCall
entryRuleCall 
:
{ before(grammarAccess.getCallRule()); }
	 ruleCall
{ after(grammarAccess.getCallRule()); } 
	 EOF 
;

// Rule Call
ruleCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCallAccess().getGroup()); }
(rule__Call__Group__0)
{ after(grammarAccess.getCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommand
entryRuleCommand 
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommandAccess().getGroup()); }
(rule__Command__Group__0)
{ after(grammarAccess.getCommandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionHeader
entryRuleFunctionHeader 
:
{ before(grammarAccess.getFunctionHeaderRule()); }
	 ruleFunctionHeader
{ after(grammarAccess.getFunctionHeaderRule()); } 
	 EOF 
;

// Rule FunctionHeader
ruleFunctionHeader
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionHeaderAccess().getGroup()); }
(rule__FunctionHeader__Group__0)
{ after(grammarAccess.getFunctionHeaderAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration 
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
(rule__FunctionDeclaration__Group__0)
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__VAR_INT__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVAR_INTAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getVAR_INTAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVAR_INTAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getVAR_INTAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getINTTerminalRuleCall_4_0()); }
	RULE_INT
{ after(grammarAccess.getCallAccess().getINTTerminalRuleCall_4_0()); }
)

    |(
{ before(grammarAccess.getCallAccess().getOSTerminalRuleCall_4_1()); }
	RULE_OS
{ after(grammarAccess.getCallAccess().getOSTerminalRuleCall_4_1()); }
)

    |(
{ before(grammarAccess.getCallAccess().getIDTerminalRuleCall_4_2()); }
	RULE_ID
{ after(grammarAccess.getCallAccess().getIDTerminalRuleCall_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Alternatives_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getINTTerminalRuleCall_5_1_0()); }
	RULE_INT
{ after(grammarAccess.getCallAccess().getINTTerminalRuleCall_5_1_0()); }
)

    |(
{ before(grammarAccess.getCallAccess().getOSTerminalRuleCall_5_1_1()); }
	RULE_OS
{ after(grammarAccess.getCallAccess().getOSTerminalRuleCall_5_1_1()); }
)

    |(
{ before(grammarAccess.getCallAccess().getIDTerminalRuleCall_5_1_2()); }
	RULE_ID
{ after(grammarAccess.getCallAccess().getIDTerminalRuleCall_5_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__CommandAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getCommandWriteParserRuleCall_2_0_0()); }
	ruleWrite
{ after(grammarAccess.getCommandAccess().getCommandWriteParserRuleCall_2_0_0()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getCommandNormalCaseParserRuleCall_2_0_1()); }
	ruleNormalCase
{ after(grammarAccess.getCommandAccess().getCommandNormalCaseParserRuleCall_2_0_1()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getCommandLoopCaseParserRuleCall_2_0_2()); }
	ruleLoopCase
{ after(grammarAccess.getCommandAccess().getCommandLoopCaseParserRuleCall_2_0_2()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getCommandGotoParserRuleCall_2_0_3()); }
	ruleGoto
{ after(grammarAccess.getCommandAccess().getCommandGotoParserRuleCall_2_0_3()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getCommandCallParserRuleCall_2_0_4()); }
	ruleCall
{ after(grammarAccess.getCommandAccess().getCommandCallParserRuleCall_2_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionHeader__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionHeaderAccess().getIntKeyword_2_0_0()); }

	'int' 

{ after(grammarAccess.getFunctionHeaderAccess().getIntKeyword_2_0_0()); }
)

    |(
{ before(grammarAccess.getFunctionHeaderAccess().getStringKeyword_2_0_1()); }

	'string' 

{ after(grammarAccess.getFunctionHeaderAccess().getStringKeyword_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionHeader__Alternatives_3_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionHeaderAccess().getIntKeyword_3_1_0_0()); }

	'int' 

{ after(grammarAccess.getFunctionHeaderAccess().getIntKeyword_3_1_0_0()); }
)

    |(
{ before(grammarAccess.getFunctionHeaderAccess().getStringKeyword_3_1_0_1()); }

	'string' 

{ after(grammarAccess.getFunctionHeaderAccess().getStringKeyword_3_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Write__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Write__Group__0__Impl
	rule__Write__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Write__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWriteAccess().getWriteAction_0()); }
(

)
{ after(grammarAccess.getWriteAccess().getWriteAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Write__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Write__Group__1__Impl
	rule__Write__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Write__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWriteAccess().getWriteKeyword_1()); }

	'write' 

{ after(grammarAccess.getWriteAccess().getWriteKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Write__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Write__Group__2__Impl
	rule__Write__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Write__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWriteAccess().getWordAssignment_2()); }
(rule__Write__WordAssignment_2)
{ after(grammarAccess.getWriteAccess().getWordAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Write__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Write__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Write__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWriteAccess().getRegisterAssignment_3()); }
(rule__Write__RegisterAssignment_3)
{ after(grammarAccess.getWriteAccess().getRegisterAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NormalCase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalCase__Group__0__Impl
	rule__NormalCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalCase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalCaseAccess().getNormalCaseAction_0()); }
(

)
{ after(grammarAccess.getNormalCaseAccess().getNormalCaseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalCase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalCase__Group__1__Impl
	rule__NormalCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalCase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalCaseAccess().getSwitchKeyword_1()); }

	'switch' 

{ after(grammarAccess.getNormalCaseAccess().getSwitchKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalCase__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalCase__Group__2__Impl
	rule__NormalCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalCase__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalCaseAccess().getRegisterAssignment_2()); }
(rule__NormalCase__RegisterAssignment_2)
{ after(grammarAccess.getNormalCaseAccess().getRegisterAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalCase__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalCase__Group__3__Impl
	rule__NormalCase__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalCase__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalCaseAccess().getCaseKeyword_3()); }

	'case' 

{ after(grammarAccess.getNormalCaseAccess().getCaseKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalCase__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalCase__Group__4__Impl
	rule__NormalCase__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalCase__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalCaseAccess().getCaseOneAssignment_4()); }
(rule__NormalCase__CaseOneAssignment_4)*
{ after(grammarAccess.getNormalCaseAccess().getCaseOneAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalCase__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalCase__Group__5__Impl
	rule__NormalCase__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalCase__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalCaseAccess().getCaseKeyword_5()); }

	'case' 

{ after(grammarAccess.getNormalCaseAccess().getCaseKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalCase__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalCase__Group__6__Impl
	rule__NormalCase__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalCase__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalCaseAccess().getCaseSharpAssignment_6()); }
(rule__NormalCase__CaseSharpAssignment_6)*
{ after(grammarAccess.getNormalCaseAccess().getCaseSharpAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalCase__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalCase__Group__7__Impl
	rule__NormalCase__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalCase__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalCaseAccess().getCaseKeyword_7()); }

	'case' 

{ after(grammarAccess.getNormalCaseAccess().getCaseKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalCase__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalCase__Group__8__Impl
	rule__NormalCase__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalCase__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalCaseAccess().getCaseEmptyAssignment_8()); }
(rule__NormalCase__CaseEmptyAssignment_8)*
{ after(grammarAccess.getNormalCaseAccess().getCaseEmptyAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalCase__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalCase__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalCase__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalCaseAccess().getEndKeyword_9()); }

	'end' 

{ after(grammarAccess.getNormalCaseAccess().getEndKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__LoopCase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopCase__Group__0__Impl
	rule__LoopCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopCaseAccess().getLoopCaseAction_0()); }
(

)
{ after(grammarAccess.getLoopCaseAccess().getLoopCaseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopCase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopCase__Group__1__Impl
	rule__LoopCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopCaseAccess().getRswitchKeyword_1()); }

	'rswitch' 

{ after(grammarAccess.getLoopCaseAccess().getRswitchKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopCase__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopCase__Group__2__Impl
	rule__LoopCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCase__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopCaseAccess().getRegisterAssignment_2()); }
(rule__LoopCase__RegisterAssignment_2)
{ after(grammarAccess.getLoopCaseAccess().getRegisterAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopCase__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopCase__Group__3__Impl
	rule__LoopCase__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCase__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopCaseAccess().getCaseKeyword_3()); }

	'case' 

{ after(grammarAccess.getLoopCaseAccess().getCaseKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopCase__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopCase__Group__4__Impl
	rule__LoopCase__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCase__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopCaseAccess().getCaseOneAssignment_4()); }
(rule__LoopCase__CaseOneAssignment_4)*
{ after(grammarAccess.getLoopCaseAccess().getCaseOneAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopCase__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopCase__Group__5__Impl
	rule__LoopCase__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCase__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopCaseAccess().getCaseKeyword_5()); }

	'case' 

{ after(grammarAccess.getLoopCaseAccess().getCaseKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopCase__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopCase__Group__6__Impl
	rule__LoopCase__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCase__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopCaseAccess().getCaseSharpAssignment_6()); }
(rule__LoopCase__CaseSharpAssignment_6)*
{ after(grammarAccess.getLoopCaseAccess().getCaseSharpAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopCase__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopCase__Group__7__Impl
	rule__LoopCase__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCase__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopCaseAccess().getCaseKeyword_7()); }

	'case' 

{ after(grammarAccess.getLoopCaseAccess().getCaseKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopCase__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopCase__Group__8__Impl
	rule__LoopCase__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCase__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopCaseAccess().getCaseEmptyAssignment_8()); }
(rule__LoopCase__CaseEmptyAssignment_8)*
{ after(grammarAccess.getLoopCaseAccess().getCaseEmptyAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopCase__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopCase__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCase__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopCaseAccess().getEndKeyword_9()); }

	'end' 

{ after(grammarAccess.getLoopCaseAccess().getEndKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__Goto__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group__0__Impl
	rule__Goto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getGotoAction_0()); }
(

)
{ after(grammarAccess.getGotoAccess().getGotoAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group__1__Impl
	rule__Goto__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getGotoKeyword_1()); }

	'goto' 

{ after(grammarAccess.getGotoAccess().getGotoKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getLabelAssignment_2()); }
(rule__Goto__LabelAssignment_2)
{ after(grammarAccess.getGotoAccess().getLabelAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Call__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__0__Impl
	rule__Call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getCallAction_0()); }
(

)
{ after(grammarAccess.getCallAccess().getCallAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__1__Impl
	rule__Call__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getCallKeyword_1()); }

	'call' 

{ after(grammarAccess.getCallAccess().getCallKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__2__Impl
	rule__Call__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getFunctionAssignment_2()); }
(rule__Call__FunctionAssignment_2)
{ after(grammarAccess.getCallAccess().getFunctionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__3__Impl
	rule__Call__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getCallAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__4__Impl
	rule__Call__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getAlternatives_4()); }
(rule__Call__Alternatives_4)
{ after(grammarAccess.getCallAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__5__Impl
	rule__Call__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getGroup_5()); }
(rule__Call__Group_5__0)*
{ after(grammarAccess.getCallAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getCallAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Call__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group_5__0__Impl
	rule__Call__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getCallAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getAlternatives_5_1()); }
(rule__Call__Alternatives_5_1)
{ after(grammarAccess.getCallAccess().getAlternatives_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Command__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group__0__Impl
	rule__Command__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getCommandAction_0()); }
(

)
{ after(grammarAccess.getCommandAccess().getCommandAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group__1__Impl
	rule__Command__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getGroup_1()); }
(rule__Command__Group_1__0)?
{ after(grammarAccess.getCommandAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getCommandAssignment_2()); }
(rule__Command__CommandAssignment_2)
{ after(grammarAccess.getCommandAccess().getCommandAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Command__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group_1__0__Impl
	rule__Command__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getLabelAssignment_1_0()); }
(rule__Command__LabelAssignment_1_0)
{ after(grammarAccess.getCommandAccess().getLabelAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Command__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getColonKeyword_1_1()); }

	':' 

{ after(grammarAccess.getCommandAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionHeader__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionHeader__Group__0__Impl
	rule__FunctionHeader__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionHeader__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionHeaderAccess().getFuncNameAssignment_0()); }
(rule__FunctionHeader__FuncNameAssignment_0)
{ after(grammarAccess.getFunctionHeaderAccess().getFuncNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionHeader__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionHeader__Group__1__Impl
	rule__FunctionHeader__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionHeader__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionHeaderAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionHeaderAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionHeader__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionHeader__Group__2__Impl
	rule__FunctionHeader__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionHeader__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionHeaderAccess().getGroup_2()); }
(rule__FunctionHeader__Group_2__0)?
{ after(grammarAccess.getFunctionHeaderAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionHeader__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionHeader__Group__3__Impl
	rule__FunctionHeader__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionHeader__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionHeaderAccess().getGroup_3()); }
(rule__FunctionHeader__Group_3__0)*
{ after(grammarAccess.getFunctionHeaderAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionHeader__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionHeader__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionHeader__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionHeaderAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionHeaderAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionHeader__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionHeader__Group_2__0__Impl
	rule__FunctionHeader__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionHeader__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionHeaderAccess().getAlternatives_2_0()); }
(rule__FunctionHeader__Alternatives_2_0)
{ after(grammarAccess.getFunctionHeaderAccess().getAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionHeader__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionHeader__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionHeader__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionHeaderAccess().getIDTerminalRuleCall_2_1()); }
	RULE_ID
{ after(grammarAccess.getFunctionHeaderAccess().getIDTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionHeader__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionHeader__Group_3__0__Impl
	rule__FunctionHeader__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionHeader__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionHeaderAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getFunctionHeaderAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionHeader__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionHeader__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionHeader__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionHeaderAccess().getGroup_3_1()); }
(rule__FunctionHeader__Group_3_1__0)
{ after(grammarAccess.getFunctionHeaderAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionHeader__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionHeader__Group_3_1__0__Impl
	rule__FunctionHeader__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionHeader__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionHeaderAccess().getAlternatives_3_1_0()); }
(rule__FunctionHeader__Alternatives_3_1_0)
{ after(grammarAccess.getFunctionHeaderAccess().getAlternatives_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionHeader__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionHeader__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionHeader__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionHeaderAccess().getIDTerminalRuleCall_3_1_1()); }
	RULE_ID
{ after(grammarAccess.getFunctionHeaderAccess().getIDTerminalRuleCall_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFuncHeaderAssignment_0()); }
(rule__FunctionDeclaration__FuncHeaderAssignment_0)
{ after(grammarAccess.getFunctionDeclarationAccess().getFuncHeaderAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBeginKeyword_1()); }

	'begin' 

{ after(grammarAccess.getFunctionDeclarationAccess().getBeginKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFunctionDeclarationAccess().getCommandsAssignment_2()); }
(rule__FunctionDeclaration__CommandsAssignment_2)
{ after(grammarAccess.getFunctionDeclarationAccess().getCommandsAssignment_2()); }
)
(
{ before(grammarAccess.getFunctionDeclarationAccess().getCommandsAssignment_2()); }
(rule__FunctionDeclaration__CommandsAssignment_2)*
{ after(grammarAccess.getFunctionDeclarationAccess().getCommandsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getEndKeyword_3()); }

	'end' 

{ after(grammarAccess.getFunctionDeclarationAccess().getEndKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Program__FunctionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getFunctionsFunctionDeclarationParserRuleCall_0()); }
	ruleFunctionDeclaration{ after(grammarAccess.getProgramAccess().getFunctionsFunctionDeclarationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Write__WordAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWriteAccess().getWordOSTerminalRuleCall_2_0()); }
	RULE_OS{ after(grammarAccess.getWriteAccess().getWordOSTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Write__RegisterAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWriteAccess().getRegisterVAR_INTParserRuleCall_3_0()); }
	ruleVAR_INT{ after(grammarAccess.getWriteAccess().getRegisterVAR_INTParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalCase__RegisterAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalCaseAccess().getRegisterVAR_INTParserRuleCall_2_0()); }
	ruleVAR_INT{ after(grammarAccess.getNormalCaseAccess().getRegisterVAR_INTParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalCase__CaseOneAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalCaseAccess().getCaseOneCommandParserRuleCall_4_0()); }
	ruleCommand{ after(grammarAccess.getNormalCaseAccess().getCaseOneCommandParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalCase__CaseSharpAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalCaseAccess().getCaseSharpCommandParserRuleCall_6_0()); }
	ruleCommand{ after(grammarAccess.getNormalCaseAccess().getCaseSharpCommandParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalCase__CaseEmptyAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalCaseAccess().getCaseEmptyCommandParserRuleCall_8_0()); }
	ruleCommand{ after(grammarAccess.getNormalCaseAccess().getCaseEmptyCommandParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCase__RegisterAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopCaseAccess().getRegisterVAR_INTParserRuleCall_2_0()); }
	ruleVAR_INT{ after(grammarAccess.getLoopCaseAccess().getRegisterVAR_INTParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCase__CaseOneAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopCaseAccess().getCaseOneCommandParserRuleCall_4_0()); }
	ruleCommand{ after(grammarAccess.getLoopCaseAccess().getCaseOneCommandParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCase__CaseSharpAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopCaseAccess().getCaseSharpCommandParserRuleCall_6_0()); }
	ruleCommand{ after(grammarAccess.getLoopCaseAccess().getCaseSharpCommandParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopCase__CaseEmptyAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopCaseAccess().getCaseEmptyCommandParserRuleCall_8_0()); }
	ruleCommand{ after(grammarAccess.getLoopCaseAccess().getCaseEmptyCommandParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__LabelAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getLabelIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getGotoAccess().getLabelIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__FunctionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getFunctionIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getCallAccess().getFunctionIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__LabelAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getLabelIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getCommandAccess().getLabelIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__CommandAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getCommandAlternatives_2_0()); }
(rule__Command__CommandAlternatives_2_0)
{ after(grammarAccess.getCommandAccess().getCommandAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionHeader__FuncNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionHeaderAccess().getFuncNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFunctionHeaderAccess().getFuncNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__FuncHeaderAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFuncHeaderFunctionHeaderParserRuleCall_0_0()); }
	ruleFunctionHeader{ after(grammarAccess.getFunctionDeclarationAccess().getFuncHeaderFunctionHeaderParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__CommandsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getCommandsCommandParserRuleCall_2_0()); }
	ruleCommand{ after(grammarAccess.getFunctionDeclarationAccess().getCommandsCommandParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


fragment RULE_LETTER : ('A'..'Z'|'a'..'z'|'_');

fragment RULE_DIGIT : '0'..'9';

RULE_OS : ('1'|'#')+;

RULE_INT : ('0'..'9')+;

RULE_ID : RULE_LETTER+ (RULE_LETTER|RULE_DIGIT|RULE_OS)*;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


