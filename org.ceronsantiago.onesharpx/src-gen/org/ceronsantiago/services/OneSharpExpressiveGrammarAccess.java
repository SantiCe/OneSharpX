/*
 * generated by Xtext
 */
package org.ceronsantiago.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class OneSharpExpressiveGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Assignment cFunctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionsFunctionDeclarationParserRuleCall_0 = (RuleCall)cFunctionsAssignment.eContents().get(0);
		
		////TODO: Factorize
		////-------------------------------
		//// START SYMBOL - 1#X Program
		////-------------------------------
		//Program:
		//	functions+=FunctionDeclaration+;
		@Override public ParserRule getRule() { return rule; }

		//functions+=FunctionDeclaration+
		public Assignment getFunctionsAssignment() { return cFunctionsAssignment; }

		//FunctionDeclaration
		public RuleCall getFunctionsFunctionDeclarationParserRuleCall_0() { return cFunctionsFunctionDeclarationParserRuleCall_0; }
	}

	public class VAR_INTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VAR_INT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////----------------------
		////Variables
		////----------------------
		//VAR_INT:
		//	INT | ID;
		@Override public ParserRule getRule() { return rule; }

		//INT | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class WriteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Write");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWriteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWriteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWordAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWordOSTerminalRuleCall_2_0 = (RuleCall)cWordAssignment_2.eContents().get(0);
		private final Assignment cRegisterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRegisterVAR_INTParserRuleCall_3_0 = (RuleCall)cRegisterAssignment_3.eContents().get(0);
		
		////-------------------------------
		//// PRIMITIVE FUNCTIONS
		////-------------------------------
		//Write:
		//	{Write} "write" word=OS register=VAR_INT;
		@Override public ParserRule getRule() { return rule; }

		//{Write} "write" word=OS register=VAR_INT
		public Group getGroup() { return cGroup; }

		//{Write}
		public Action getWriteAction_0() { return cWriteAction_0; }

		//"write"
		public Keyword getWriteKeyword_1() { return cWriteKeyword_1; }

		//word=OS
		public Assignment getWordAssignment_2() { return cWordAssignment_2; }

		//OS
		public RuleCall getWordOSTerminalRuleCall_2_0() { return cWordOSTerminalRuleCall_2_0; }

		//register=VAR_INT
		public Assignment getRegisterAssignment_3() { return cRegisterAssignment_3; }

		//VAR_INT
		public RuleCall getRegisterVAR_INTParserRuleCall_3_0() { return cRegisterVAR_INTParserRuleCall_3_0; }
	}

	public class NormalCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NormalCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNormalCaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRegisterVAR_INTParserRuleCall_2_0 = (RuleCall)cRegisterAssignment_2.eContents().get(0);
		private final Keyword cCaseKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCaseOneAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCaseOneCommandParserRuleCall_4_0 = (RuleCall)cCaseOneAssignment_4.eContents().get(0);
		private final Keyword cCaseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCaseSharpAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCaseSharpCommandParserRuleCall_6_0 = (RuleCall)cCaseSharpAssignment_6.eContents().get(0);
		private final Keyword cCaseKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cCaseEmptyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCaseEmptyCommandParserRuleCall_8_0 = (RuleCall)cCaseEmptyAssignment_8.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//NormalCase:
		//	{NormalCase} "switch" register=VAR_INT "case" caseOne+=Command* "case" caseSharp+=Command* "case" caseEmpty+=Command*
		//	"end";
		@Override public ParserRule getRule() { return rule; }

		//{NormalCase} "switch" register=VAR_INT "case" caseOne+=Command* "case" caseSharp+=Command* "case" caseEmpty+=Command*
		//"end"
		public Group getGroup() { return cGroup; }

		//{NormalCase}
		public Action getNormalCaseAction_0() { return cNormalCaseAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//register=VAR_INT
		public Assignment getRegisterAssignment_2() { return cRegisterAssignment_2; }

		//VAR_INT
		public RuleCall getRegisterVAR_INTParserRuleCall_2_0() { return cRegisterVAR_INTParserRuleCall_2_0; }

		//"case"
		public Keyword getCaseKeyword_3() { return cCaseKeyword_3; }

		//caseOne+=Command*
		public Assignment getCaseOneAssignment_4() { return cCaseOneAssignment_4; }

		//Command
		public RuleCall getCaseOneCommandParserRuleCall_4_0() { return cCaseOneCommandParserRuleCall_4_0; }

		//"case"
		public Keyword getCaseKeyword_5() { return cCaseKeyword_5; }

		//caseSharp+=Command*
		public Assignment getCaseSharpAssignment_6() { return cCaseSharpAssignment_6; }

		//Command
		public RuleCall getCaseSharpCommandParserRuleCall_6_0() { return cCaseSharpCommandParserRuleCall_6_0; }

		//"case"
		public Keyword getCaseKeyword_7() { return cCaseKeyword_7; }

		//caseEmpty+=Command*
		public Assignment getCaseEmptyAssignment_8() { return cCaseEmptyAssignment_8; }

		//Command
		public RuleCall getCaseEmptyCommandParserRuleCall_8_0() { return cCaseEmptyCommandParserRuleCall_8_0; }

		//"end"
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}

	public class LoopCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoopCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoopCaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRswitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRegisterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRegisterVAR_INTParserRuleCall_2_0 = (RuleCall)cRegisterAssignment_2.eContents().get(0);
		private final Keyword cCaseKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCaseOneAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCaseOneCommandParserRuleCall_4_0 = (RuleCall)cCaseOneAssignment_4.eContents().get(0);
		private final Keyword cCaseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCaseSharpAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCaseSharpCommandParserRuleCall_6_0 = (RuleCall)cCaseSharpAssignment_6.eContents().get(0);
		private final Keyword cCaseKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cCaseEmptyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCaseEmptyCommandParserRuleCall_8_0 = (RuleCall)cCaseEmptyAssignment_8.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//LoopCase:
		//	{LoopCase} "rswitch" register=VAR_INT "case" caseOne+=Command* "case" caseSharp+=Command* "case" caseEmpty+=Command*
		//	"end";
		@Override public ParserRule getRule() { return rule; }

		//{LoopCase} "rswitch" register=VAR_INT "case" caseOne+=Command* "case" caseSharp+=Command* "case" caseEmpty+=Command*
		//"end"
		public Group getGroup() { return cGroup; }

		//{LoopCase}
		public Action getLoopCaseAction_0() { return cLoopCaseAction_0; }

		//"rswitch"
		public Keyword getRswitchKeyword_1() { return cRswitchKeyword_1; }

		//register=VAR_INT
		public Assignment getRegisterAssignment_2() { return cRegisterAssignment_2; }

		//VAR_INT
		public RuleCall getRegisterVAR_INTParserRuleCall_2_0() { return cRegisterVAR_INTParserRuleCall_2_0; }

		//"case"
		public Keyword getCaseKeyword_3() { return cCaseKeyword_3; }

		//caseOne+=Command*
		public Assignment getCaseOneAssignment_4() { return cCaseOneAssignment_4; }

		//Command
		public RuleCall getCaseOneCommandParserRuleCall_4_0() { return cCaseOneCommandParserRuleCall_4_0; }

		//"case"
		public Keyword getCaseKeyword_5() { return cCaseKeyword_5; }

		//caseSharp+=Command*
		public Assignment getCaseSharpAssignment_6() { return cCaseSharpAssignment_6; }

		//Command
		public RuleCall getCaseSharpCommandParserRuleCall_6_0() { return cCaseSharpCommandParserRuleCall_6_0; }

		//"case"
		public Keyword getCaseKeyword_7() { return cCaseKeyword_7; }

		//caseEmpty+=Command*
		public Assignment getCaseEmptyAssignment_8() { return cCaseEmptyAssignment_8; }

		//Command
		public RuleCall getCaseEmptyCommandParserRuleCall_8_0() { return cCaseEmptyCommandParserRuleCall_8_0; }

		//"end"
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}

	public class GotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGotoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGotoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelIDTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//Goto:
		//	{Goto} "goto" label=ID;
		@Override public ParserRule getRule() { return rule; }

		//{Goto} "goto" label=ID
		public Group getGroup() { return cGroup; }

		//{Goto}
		public Action getGotoAction_0() { return cGotoAction_0; }

		//"goto"
		public Keyword getGotoKeyword_1() { return cGotoKeyword_1; }

		//label=ID
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_2_0() { return cLabelIDTerminalRuleCall_2_0; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionIDTerminalRuleCall_2_0 = (RuleCall)cFunctionAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final RuleCall cOSTerminalRuleCall_4_1 = (RuleCall)cAlternatives_4.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_4_2 = (RuleCall)cAlternatives_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_5_1_0 = (RuleCall)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cOSTerminalRuleCall_5_1_1 = (RuleCall)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_5_1_2 = (RuleCall)cAlternatives_5_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Call:
		//	{Call} "call" function=ID "(" (INT | OS | ID) ("," (INT | OS | ID))* ")";
		@Override public ParserRule getRule() { return rule; }

		//{Call} "call" function=ID "(" (INT | OS | ID) ("," (INT | OS | ID))* ")"
		public Group getGroup() { return cGroup; }

		//{Call}
		public Action getCallAction_0() { return cCallAction_0; }

		//"call"
		public Keyword getCallKeyword_1() { return cCallKeyword_1; }

		//function=ID
		public Assignment getFunctionAssignment_2() { return cFunctionAssignment_2; }

		//ID
		public RuleCall getFunctionIDTerminalRuleCall_2_0() { return cFunctionIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//INT | OS | ID
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//INT
		public RuleCall getINTTerminalRuleCall_4_0() { return cINTTerminalRuleCall_4_0; }

		//OS
		public RuleCall getOSTerminalRuleCall_4_1() { return cOSTerminalRuleCall_4_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_4_2() { return cIDTerminalRuleCall_4_2; }

		//("," (INT | OS | ID))*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//INT | OS | ID
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_5_1_0() { return cINTTerminalRuleCall_5_1_0; }

		//OS
		public RuleCall getOSTerminalRuleCall_5_1_1() { return cOSTerminalRuleCall_5_1_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_5_1_2() { return cIDTerminalRuleCall_5_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLabelIDTerminalRuleCall_1_0_0 = (RuleCall)cLabelAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cCommandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cCommandAlternatives_2_0 = (Alternatives)cCommandAssignment_2.eContents().get(0);
		private final RuleCall cCommandWriteParserRuleCall_2_0_0 = (RuleCall)cCommandAlternatives_2_0.eContents().get(0);
		private final RuleCall cCommandNormalCaseParserRuleCall_2_0_1 = (RuleCall)cCommandAlternatives_2_0.eContents().get(1);
		private final RuleCall cCommandLoopCaseParserRuleCall_2_0_2 = (RuleCall)cCommandAlternatives_2_0.eContents().get(2);
		private final RuleCall cCommandGotoParserRuleCall_2_0_3 = (RuleCall)cCommandAlternatives_2_0.eContents().get(3);
		private final RuleCall cCommandCallParserRuleCall_2_0_4 = (RuleCall)cCommandAlternatives_2_0.eContents().get(4);
		
		////--------------------------------
		//// Commands
		////--------------------------------
		//Command:
		//	{Command} (label=ID ":")? command=(Write | NormalCase | LoopCase | Goto | Call);
		@Override public ParserRule getRule() { return rule; }

		//{Command} (label=ID ":")? command=(Write | NormalCase | LoopCase | Goto | Call)
		public Group getGroup() { return cGroup; }

		//{Command}
		public Action getCommandAction_0() { return cCommandAction_0; }

		//(label=ID ":")?
		public Group getGroup_1() { return cGroup_1; }

		//label=ID
		public Assignment getLabelAssignment_1_0() { return cLabelAssignment_1_0; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_0_0() { return cLabelIDTerminalRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//command=(Write | NormalCase | LoopCase | Goto | Call)
		public Assignment getCommandAssignment_2() { return cCommandAssignment_2; }

		//Write | NormalCase | LoopCase | Goto | Call
		public Alternatives getCommandAlternatives_2_0() { return cCommandAlternatives_2_0; }

		//Write
		public RuleCall getCommandWriteParserRuleCall_2_0_0() { return cCommandWriteParserRuleCall_2_0_0; }

		//NormalCase
		public RuleCall getCommandNormalCaseParserRuleCall_2_0_1() { return cCommandNormalCaseParserRuleCall_2_0_1; }

		//LoopCase
		public RuleCall getCommandLoopCaseParserRuleCall_2_0_2() { return cCommandLoopCaseParserRuleCall_2_0_2; }

		//Goto
		public RuleCall getCommandGotoParserRuleCall_2_0_3() { return cCommandGotoParserRuleCall_2_0_3; }

		//Call
		public RuleCall getCommandCallParserRuleCall_2_0_4() { return cCommandCallParserRuleCall_2_0_4; }
	}

	public class FunctionHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFuncNameIDTerminalRuleCall_0_0 = (RuleCall)cFuncNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cIntKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cStringKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_1_0 = (Alternatives)cGroup_3_1.eContents().get(0);
		private final Keyword cIntKeyword_3_1_0_0 = (Keyword)cAlternatives_3_1_0.eContents().get(0);
		private final Keyword cStringKeyword_3_1_0_1 = (Keyword)cAlternatives_3_1_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////--------------------------------
		//// Functions
		////--------------------------------
		//FunctionHeader:
		//	funcName=ID "(" (("int" | "string") ID)? ("," (("int" | "string") ID))* ")";
		@Override public ParserRule getRule() { return rule; }

		//funcName=ID "(" (("int" | "string") ID)? ("," (("int" | "string") ID))* ")"
		public Group getGroup() { return cGroup; }

		//funcName=ID
		public Assignment getFuncNameAssignment_0() { return cFuncNameAssignment_0; }

		//ID
		public RuleCall getFuncNameIDTerminalRuleCall_0_0() { return cFuncNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(("int" | "string") ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"int" | "string"
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"int"
		public Keyword getIntKeyword_2_0_0() { return cIntKeyword_2_0_0; }

		//"string"
		public Keyword getStringKeyword_2_0_1() { return cStringKeyword_2_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }

		//("," (("int" | "string") ID))*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//("int" | "string") ID
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"int" | "string"
		public Alternatives getAlternatives_3_1_0() { return cAlternatives_3_1_0; }

		//"int"
		public Keyword getIntKeyword_3_1_0_0() { return cIntKeyword_3_1_0_0; }

		//"string"
		public Keyword getStringKeyword_3_1_0_1() { return cStringKeyword_3_1_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_3_1_1() { return cIDTerminalRuleCall_3_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncHeaderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFuncHeaderFunctionHeaderParserRuleCall_0_0 = (RuleCall)cFuncHeaderAssignment_0.eContents().get(0);
		private final Keyword cBeginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsCommandParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionDeclaration:
		//	funcHeader=FunctionHeader "begin" commands+=Command+ "end";
		@Override public ParserRule getRule() { return rule; }

		//funcHeader=FunctionHeader "begin" commands+=Command+ "end"
		public Group getGroup() { return cGroup; }

		//funcHeader=FunctionHeader
		public Assignment getFuncHeaderAssignment_0() { return cFuncHeaderAssignment_0; }

		//FunctionHeader
		public RuleCall getFuncHeaderFunctionHeaderParserRuleCall_0_0() { return cFuncHeaderFunctionHeaderParserRuleCall_0_0; }

		//"begin"
		public Keyword getBeginKeyword_1() { return cBeginKeyword_1; }

		//commands+=Command+
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_2_0() { return cCommandsCommandParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	
	
	private final ProgramElements pProgram;
	private final TerminalRule tLETTER;
	private final TerminalRule tDIGIT;
	private final TerminalRule tOS;
	private final TerminalRule tINT;
	private final TerminalRule tID;
	private final TerminalRule tWS;
	private final VAR_INTElements pVAR_INT;
	private final WriteElements pWrite;
	private final NormalCaseElements pNormalCase;
	private final LoopCaseElements pLoopCase;
	private final GotoElements pGoto;
	private final CallElements pCall;
	private final CommandElements pCommand;
	private final FunctionHeaderElements pFunctionHeader;
	private final FunctionDeclarationElements pFunctionDeclaration;
	
	private final Grammar grammar;

	@Inject
	public OneSharpExpressiveGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pProgram = new ProgramElements();
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LETTER");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT");
		this.tOS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OS");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.pVAR_INT = new VAR_INTElements();
		this.pWrite = new WriteElements();
		this.pNormalCase = new NormalCaseElements();
		this.pLoopCase = new LoopCaseElements();
		this.pGoto = new GotoElements();
		this.pCall = new CallElements();
		this.pCommand = new CommandElements();
		this.pFunctionHeader = new FunctionHeaderElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.ceronsantiago.OneSharpExpressive".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	////TODO: Factorize
	////-------------------------------
	//// START SYMBOL - 1#X Program
	////-------------------------------
	//Program:
	//	functions+=FunctionDeclaration+;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	////-------------------------------
	//// TERMINAL FRAGMENTS
	////-------------------------------
	////Latin alphabet
	//terminal fragment LETTER:
	//	"A".."Z" | "a".."z" | "_";
	public TerminalRule getLETTERRule() {
		return tLETTER;
	} 

	/// *terminal fragment RESERVED: //Reserved strings
	//	'write'|'switch'|'rswitch'|'goto'|'call'|'case'|'begin'|'end'|'int'|'string';* / terminal fragment DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	} 

	////-------------------------------
	//// TERMINAL RULES
	////-------------------------------
	//terminal OS:
	//	("1" | "#")+;
	public TerminalRule getOSRule() {
		return tOS;
	} 

	//terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	////A valid ID for a function, label, parameter, etc. 
	//terminal ID:
	//	LETTER+ (LETTER | DIGIT | OS)*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	////----------------------
	////Variables
	////----------------------
	//VAR_INT:
	//	INT | ID;
	public VAR_INTElements getVAR_INTAccess() {
		return pVAR_INT;
	}
	
	public ParserRule getVAR_INTRule() {
		return getVAR_INTAccess().getRule();
	}

	////-------------------------------
	//// PRIMITIVE FUNCTIONS
	////-------------------------------
	//Write:
	//	{Write} "write" word=OS register=VAR_INT;
	public WriteElements getWriteAccess() {
		return pWrite;
	}
	
	public ParserRule getWriteRule() {
		return getWriteAccess().getRule();
	}

	//NormalCase:
	//	{NormalCase} "switch" register=VAR_INT "case" caseOne+=Command* "case" caseSharp+=Command* "case" caseEmpty+=Command*
	//	"end";
	public NormalCaseElements getNormalCaseAccess() {
		return pNormalCase;
	}
	
	public ParserRule getNormalCaseRule() {
		return getNormalCaseAccess().getRule();
	}

	//LoopCase:
	//	{LoopCase} "rswitch" register=VAR_INT "case" caseOne+=Command* "case" caseSharp+=Command* "case" caseEmpty+=Command*
	//	"end";
	public LoopCaseElements getLoopCaseAccess() {
		return pLoopCase;
	}
	
	public ParserRule getLoopCaseRule() {
		return getLoopCaseAccess().getRule();
	}

	//Goto:
	//	{Goto} "goto" label=ID;
	public GotoElements getGotoAccess() {
		return pGoto;
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}

	//Call:
	//	{Call} "call" function=ID "(" (INT | OS | ID) ("," (INT | OS | ID))* ")";
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	////--------------------------------
	//// Commands
	////--------------------------------
	//Command:
	//	{Command} (label=ID ":")? command=(Write | NormalCase | LoopCase | Goto | Call);
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	////--------------------------------
	//// Functions
	////--------------------------------
	//FunctionHeader:
	//	funcName=ID "(" (("int" | "string") ID)? ("," (("int" | "string") ID))* ")";
	public FunctionHeaderElements getFunctionHeaderAccess() {
		return pFunctionHeader;
	}
	
	public ParserRule getFunctionHeaderRule() {
		return getFunctionHeaderAccess().getRule();
	}

	//FunctionDeclaration:
	//	funcHeader=FunctionHeader "begin" commands+=Command+ "end";
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
}
